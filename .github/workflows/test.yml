# Simple workflow for deploying static content to GitHub Pages
name: CI/CD QA Environment

on:
  pull_request:
    branches: ["test"]
  push:
    branches: ["test"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  security-events: write

concurrency:
  group: "pages"
  cancel-in-progress: false
  

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: Staging
    steps:
    - name: Checkout the latest code
      uses: actions/checkout@v4.1.2
    - name: Setup Python 3.12
      uses: actions/setup-python@v5.0.0
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyrefly flake8 pytest requests pytest-mock selenium requests-mock coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type Checker
      run: |
          pyrefly check

    - name: Run tests
      run: |
        pytest

    
  analyze:
    needs: build
    uses: ./.github/workflows/code-analysis.yml
    with:
      language: 'python'

  deploy:
    needs: analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Check if triggered by PR
        id: check_pr
        run: |
          if [ -z "${{ github.event.pull_request.number }}"]; then
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Not a pull request event — skipping merge step."
          else
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "✅ Pull request event detected (#${{ github.event.pull_request.number }})"
          fi

      - name: Check if PR is mergeable
        if: steps.check_pr.outputs.is_pr == 'true'
        id: mergeable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "Checking if PR #$PR_NUMBER is mergeable..."

          # Fetch PR info from GitHub API
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER)

          mergeable=$(echo "$response" | jq -r '.mergeable')
          mergeable_state=$(echo "$response" | jq -r '.mergeable_state')

          echo "mergeable=$mergeable"
          echo "mergeable_state=$mergeable_state"

          if [ "$mergeable" != "true" ]; then
            echo "❌ Pull request has conflicts or is not mergeable (state: $mergeable_state)."
            exit 1
          fi

      - name: Merge Pull Request
        if: steps.mergeable.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "Merging PR #$PR_NUMBER..."
          gh auth setup-git
          gh auth status
          gh pr merge $PR_NUMBER --merge --admin 
