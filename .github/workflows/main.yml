# Simple workflow for deploying static content to GitHub Pages
name: CI/CD Pull Requests Pipeline CSE 270

on:
  pull_request:
    branches: ["master", "staging"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  security-events: write

concurrency:
  group: "pages"
  cancel-in-progress: false
  

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: Staging
    steps:
    - name: Checkout the latest code
      uses: actions/checkout@v4.1.2
    - name: Setup Python 3.12
      uses: actions/setup-python@v5.0.0
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv pyrefly flake8 pytest requests pytest-mock selenium requests-mock coverage
        uv pip compile project.toml -o requirements.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type Checker
      run: |
        pyrefly check

    - name: Run tests
      run: |
        pytest

    
  analyze:
    needs: build
    uses: ./.github/workflows/code-analysis.yml
    with:
      language: 'javascript'

  deploy:
    needs: analyze
    environment:
      name: Production

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5.0.0
        with:
            python-version: "3.12"

      - name: Install dependencies
        run: pip install requirements.txt

      - name: Build project
        run: fastapi run app/main.py

      #- name: Install Vercel CLI
      #  run: npm install -g vercel

      #- name: Deploy to Vercel
      #  env:
      #    VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #  run: |
      #    vercel --prod --confirm --token $VERCEL_TOKEN

